#!/usr/bin/env python
# Esotope Brainfuck-to-C Compiler
# Copyright (c) 2009, Kang Seonghoon.

import sys
from cStringIO import StringIO

def insert_indent(s):
    return '\t' + s.rstrip('\n').replace('\n', '\n\t') + '\n'

class Node(object):
    pass

class ComplexNode(Node):
    def __init__(self, children=None):
        if children:
            self.children = list(children)
        else:
            self.children = []

    def __getattr__(self, name):
        return getattr(self.children, name)

    def _indentall(self):
        return ''.join(map(insert_indent, map(str, self.children)))

class Node_Program(ComplexNode):
    def __str__(self):
        return ('/* generated by esotope-bfc */\n'
                '#include <stdio.h>\n'
                'char mem[30000], *mptr = mem;\n'
                'int main(void) {\n'
                '%s'
                '\treturn 0;\n'
                '}\n') % self._indentall()

    def __repr__(self):
        return 'Program%r' % self.children

class Node_AdjustMemory(Node):
    def __init__(self, changes=None):
        if changes:
            self.changes = dict(changes)
            for k, v in self.changes.items():
                if v == 0: del self.changes[k]
        else:
            self.changes = {}

    def __getitem__(self, offset):
        return self.changes.get(offset, 0)

    def __setitem__(self, offset, delta):
        if delta == 0:
            try: del self.changes[offset]
            except KeyError: pass
        else:
            self.changes[offset] = delta

    def __str__(self):
        codes = []
        for k, v in self.changes.items():
            if k == 0:
                target = '*mptr'
            else:
                target = 'mptr[%d]' % k
            if v < 0:
                codes.append('%s -= %s;\n' % (target, -v))
            elif v != 0:
                codes.append('%s += %s;\n' % (target, v))
        return ''.join(codes)

    def __repr__(self):
        items = sorted(self.changes.items())
        return 'AdjustMemory[%s]' % ', '.join('%d:%r' % (k,v) for k, v in items)

class Node_MovePointer(Node):
    def __init__(self, delta):
        self.delta = delta

    def __str__(self):
        if self.delta < 0:
            return 'mptr -= %s;\n' % -self.delta
        elif self.delta != 0:
            return 'mptr += %s;\n' % self.delta

    def __repr__(self):
        return 'MovePointer[%r]' % self.delta

class Node_Input(Node):
    def __str__(self):
        return '*mptr = getchar();\n'

    def __repr__(self):
        return 'Input[]'

class Node_Output(Node):
    def __str__(self):
        return 'putchar(*mptr);\n'

    def __repr__(self):
        return 'Output[]'

class Node_LoopWhile(ComplexNode):
    def __str__(self):
        return ('while (*mptr) {\n'
                '%s'
                '}\n') % self._indentall()

    def __repr__(self):
        return 'LoopWhile%r' % self.children

class Parser(object):
    def parse(self, fp):
        nodestack = [Node_Program()]

        memchanges = {}
        ptroffset = 0
        for lineno, line in enumerate(fp):
            for ch in line:
                if ch == '+':
                    memchanges[ptroffset] = memchanges.get(ptroffset, 0) + 1
                elif ch == '-':
                    memchanges[ptroffset] = memchanges.get(ptroffset, 0) - 1
                elif ch == '>':
                    ptroffset += 1
                elif ch == '<':
                    ptroffset -= 1
                elif ch in '.,[]':
                    if any(memchanges.values()):
                        nodestack[-1].append(Node_AdjustMemory(memchanges))
                    if ptroffset != 0:
                        nodestack[-1].append(Node_MovePointer(ptroffset))
                    memchanges = {}
                    ptroffset = 0

                    if ch == '.':
                        nodestack[-1].append(Node_Output())
                    elif ch == ',':
                        nodestack[-1].append(Node_Input())
                    elif ch == '[':
                        nodestack.append(Node_LoopWhile())
                    else:
                        if len(nodestack) < 2:
                            raise ValueError('Not matching ] at line %d' % (lineno+1))
                        loop = nodestack.pop()
                        nodestack[-1].append(loop)

        if any(memchanges.values()):
            nodestack[-1].append(Node_AdjustMemory(memchanges))
        if ptroffset != 0:
            nodestack[-1].append(Node_MovePointer(ptroffset))
        if len(nodestack) != 1:
            raise ValueError('Premature end of the loop')

        return nodestack[0]

def main(argv):
    if len(argv) < 2:
        print >>sys.stderr, 'Usage: %s filename' % argv[0]
        return 1

    parser = Parser()
    node = parser.parse(file(argv[1], 'r'))
    print node
    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv))

