#!/usr/bin/env python
# Esotope Brainfuck-to-C Compiler
# Copyright (c) 2009, Kang Seonghoon.

import sys
from collections import namedtuple
from cStringIO import StringIO


class _ExprMeta(type):
    def __getitem__(self, offset):
        return Expr(Expr.MemoryRef(offset))

class Expr(object):
    __metaclass__ = _ExprMeta
    __slots__ = ['root']

    class Number(namedtuple('Number', 'value')):
        def __str__(self): return str(self.value)
        def __repr__(self): return repr(self.value)

    class MemoryRef(namedtuple('MemoryRef', 'offset')):
        def __str__(self): return 'mptr[%s]' % self.offset
        def __repr__(self): return 'mptr[%r]' % self.offset

    class Add(namedtuple('Add', 'lhs rhs')):
        def __str__(self): return '(%s + %s)' % (self.lhs, self.rhs)
        def __repr__(self): return '(%r+%r)' % (self.lhs, self.rhs)

    class Subtract(namedtuple('Subtract', 'lhs rhs')):
        def __str__(self): return '(%s - %s)' % (self.lhs, self.rhs)
        def __repr__(self): return '(%r-%r)' % (self.lhs, self.rhs)

    class Multiply(namedtuple('Multiply', 'lhs rhs')):
        def __str__(self): return '(%s * %s)' % (self.lhs, self.rhs)
        def __repr__(self): return '(%r*%r)' % (self.lhs, self.rhs)

    def __init__(self, root):
        if isinstance(root, (int, long)):
            self.root = Expr.Number(root)
        else:
            self.root = root

    def __add__(self, rhs):
        if rhs == 0: return self
        return Expr(Expr.Add(self.root, Expr(rhs).root))

    def __radd__(self, lhs):
        if lhs == 0: return self
        return Expr(Expr.Add(Expr(lhs).root, self.root))

    def __sub__(self, rhs):
        return Expr(Expr.Subtract(self.root, Expr(rhs).root))
    def __rsub__(self, lhs):
        return Expr(Expr.Subtract(Expr(lhs).root, self.root))

    def __mul__(self, rhs):
        return Expr(Expr.Multiply(self.root, Expr(rhs).root))
    def __rmul__(self, lhs):
        return Expr(Expr.Multiply(Expr(lhs).root, self.root))

    def __str__(self):
        return str(self.root)

    def __repr__(self):
        return repr(self.root)


def insert_indent(s):
    if s == '': return s
    return '\t' + s.rstrip('\n').replace('\n', '\n\t') + '\n'

class Node(object):
    def __nonzero__(self):
        return True # return True if this node is no-op.

    def combine(self, next):
        pass # return None or combined Node object.

    def __str__(self): raise NotImplemented('should be overriden')
    def __repr__(self): raise NotImplemented('should be overriden')

class ComplexNode(Node, list):
    def _indentall(self):
        return ''.join(map(insert_indent, map(str, self)))

    def _repr(self, name):
        return name + list.__repr__(self)

    def cleanup(self):
        i = 1
        while i < len(self):
            if not self[i-1]:
                del self[i-1]
            elif self[i-1].combine(self[i]):
                del self[i]
            else:
                i += 1
        if self and not self[0]:
            del self[0]

class Program(ComplexNode):
    def __str__(self):
        return ('/* generated by esotope-bfc */\n'
                '#include <stdio.h>\n'
                'char mem[30000], *mptr = mem;\n'
                'int main(void) {\n'
                '%s'
                '\treturn 0;\n'
                '}\n') % self._indentall()

    def __repr__(self):
        return self._repr('Program')

class SetCurrent(Node):
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return '*mptr = %s;\n' % self.value

    def __repr__(self):
        return 'SetCurrent[%r]' % self.value

class AdjustMemory(Node):
    def __init__(self, offset=0, changes=None):
        self.offset = offset
        if changes:
            self.changes = dict(changes)
            for k, v in self.changes.items():
                if v == 0: del self.changes[k]
        else:
            self.changes = {}

    def __nonzero__(self):
        return len(self.changes) > 0 or self.offset != 0

    def __getitem__(self, offset):
        assert isinstance(offset, (int, long))
        return self.changes.get(offset, 0)

    def __setitem__(self, offset, delta):
        assert isinstance(offset, (int, long))
        if delta == 0:
            try: del self.changes[offset]
            except KeyError: pass
        else:
            self.changes[offset] = delta

    def combine(self, next):
        if isinstance(next, AdjustMemory):
            for k, v in next.changes.items():
                self[self.offset + k] += v
            self.offset += next.offset
            return True

        if isinstance(next, SetCurrent):
            self.offset
            return False

    def __str__(self):
        codes = []

        for k, v in self.changes.items():
            if v < 0:
                codes.append('mptr[%d] -= %s;\n' % (k, -v))
            elif v != 0:
                codes.append('mptr[%d] += %s;\n' % (k, v))

        if self.offset < 0:
            codes.append('mptr -= %s;\n' % -self.offset)
        elif self.offset != 0:
            codes.append('mptr += %s;\n' % self.offset)

        return ''.join(codes)

    def __repr__(self):
        items = sorted(self.changes.items())
        if items:
            return 'AdjustMemory[offset=%r, %s]' % (
                    self.offset, ', '.join('%d:%r' % (k,v) for k, v in items))
        else:
            return 'AdjustMemory[offset=%r]' % self.offset

class Input(Node):
    def __str__(self):
        return '*mptr = getchar();\n'

    def __repr__(self):
        return 'Input[]'

class Output(Node):
    def __str__(self):
        return 'putchar(*mptr);\n'

    def __repr__(self):
        return 'Output[]'

class LoopWhile(ComplexNode):
    def __str__(self):
        return ('while (*mptr) {\n'
                '%s'
                '}\n') % self._indentall()

    def __repr__(self):
        return self._repr('LoopWhile')


class Compiler(object):
    def parse(self, fp):
        nodestack = [Program()]

        memchanges = {}
        ptroffset = 0
        for lineno, line in enumerate(fp):
            for ch in line:
                if ch == '+':
                    memchanges[ptroffset] = memchanges.get(ptroffset, 0) + 1
                elif ch == '-':
                    memchanges[ptroffset] = memchanges.get(ptroffset, 0) - 1
                elif ch == '>':
                    ptroffset += 1
                elif ch == '<':
                    ptroffset -= 1
                elif ch in '.,[]':
                    if ptroffset != 0 or any(memchanges.values()):
                        nodestack[-1].append(AdjustMemory(ptroffset, memchanges))
                    memchanges = {}
                    ptroffset = 0

                    if ch == '.':
                        nodestack[-1].append(Output())
                    elif ch == ',':
                        nodestack[-1].append(Input())
                    elif ch == '[':
                        nodestack.append(LoopWhile())
                    else:
                        if len(nodestack) < 2:
                            raise ValueError('Not matching ] at line %d' % (lineno+1))
                        loop = nodestack.pop()
                        nodestack[-1].append(loop)

        if ptroffset != 0 or any(memchanges.values()):
            nodestack[-1].append(AdjustMemory(ptroffset, memchanges))
        if len(nodestack) != 1:
            raise ValueError('Premature end of the loop')

        return nodestack[0]

    # tries to optimize tight loop: LoopWhile[AdjustMemory[offset=0, 0:+-1, ...]].
    def optimize_tightloop(self, node):
        if not isinstance(node, ComplexNode):
            return node

        overflow = 256 # XXX hard-coded, must be the power of 2

        inodes = []
        for inode in node[:]:
            if isinstance(inode, LoopWhile) and len(inode) == 1 and \
                    isinstance(inode[0], AdjustMemory) and inode[0].offset == 0:
                adjustnode = inode[0]
                if adjustnode[0] == 1:
                    mult = overflow - Expr[0]
                elif adjustnode[0] == -1:
                    mult = Expr[0]
                else:
                    mult = None

                if mult is not None:
                    adjustnode[0] = 0
                    for k in adjustnode.changes.keys():
                        adjustnode[k] *= mult
                    inodes.append(adjustnode)
                    inodes.append(SetCurrent(0))
                    continue

            if isinstance(inode, ComplexNode):
                inodes.append(self.optimize_tightloop(inode))
            else:
                inodes.append(inode)

        node[:] = inodes
        node.cleanup()
        return node

def main(argv):
    if len(argv) < 2:
        print >>sys.stderr, 'Usage: %s filename' % argv[0]
        return 1

    compiler = Compiler()
    node = compiler.parse(file(argv[1], 'r'))
    node = compiler.optimize_tightloop(node)
    print node
    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv))

